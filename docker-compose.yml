version: "3.9"

services:
  postgres:
    image: postgres:15
    container_name: weather-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: weatherdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: weather-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - ./kafka:/bitnami/kafka
    command: >
      sh -c "
        /opt/bitnami/scripts/kafka/setup.sh &&
        /opt/bitnami/scripts/kafka/run.sh &
        sleep 5 &&
        kafka-topics.sh --create --if-not-exists --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic notification.confirmation-email &&
        kafka-topics.sh --create --if-not-exists --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic notification.subscription-confirmed &&
        kafka-topics.sh --create --if-not-exists --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic notification.unsubscribed &&
        kafka-topics.sh --create --if-not-exists --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic notification.weather-update &&
        wait"

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    user: "root"
    command: -config.file=/etc/loki/local-config.yaml -target=all
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config:/etc/loki
      - ./loki-storage/index:/loki/index
      - ./loki-storage/boltdb-cache:/loki/boltdb-cache
      - ./loki-storage/chunks:/loki/chunks

  grafana:
    image: grafana/grafana:9.2.4
    container_name: grafana
    restart: always
    ports:
      - "3005:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - loki

  notification:
    build:
      context: .
      dockerfile: services/notification/Dockerfile
    container_name: notification
    ports:
      - "3001:3001"
      - "50051:50051"
    env_file: ./services/notification/.env
    environment:
      API_GATEWAY_URL: http://localhost:3000

  weather:
    build:
      context: .
      dockerfile: services/weather/Dockerfile
    container_name: weather
    restart: always
    depends_on:
      redis:
        condition: service_started
    env_file: ./services/weather/.env
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3002:3002"
      - "50052:50052"

  subscription:
    build:
      context: .
      dockerfile: services/subscription/Dockerfile
    container_name: subscription
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      notification:
        condition: service_started
      weather:
        condition: service_started
      kafka:
        condition: service_started
    env_file: ./services/subscription/.env
    environment:
      POSTGRES_HOST: postgres
      NOTIFICATION_URL: http://notification:3001
      WEATHER_URL: http://weather:3002
    ports:
      - "3003:3003"
      - "50053:50053"

  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "3000:3000"
    env_file: ./services/api-gateway/.env
    environment:
      WEATHER_SERVICE_URL: http://weather:3002
      SUBSCRIPTION_SERVICE_URL: http://subscription:3003
    depends_on:
      - weather
      - subscription

volumes:
  postgres_data:
  redis_data:
  grafana-storage:
