version: "3.9"

services:
  postgres:
    image: postgres:15
    container_name: weather-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: weatherdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: weather-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning

  notification:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: notification
    ports:
      - "3001:3001"
    env_file: ./services/notification/.env

  weather:
    build:
      context: ./services/weather
      dockerfile: Dockerfile
    container_name: weather
    restart: always
    depends_on:
      redis:
        condition: service_started
    env_file: ./services/weather/.env
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3002:3002"

  subscription:
    build:
      context: ./services/subscription
      dockerfile: Dockerfile
    container_name: subscription
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      notification:
        condition: service_started
      weather:
        condition: service_started
    env_file: ./services/subscription/.env
    environment:
      POSTGRES_HOST: postgres
      NOTIFICATION_URL: http://notification:3001
      WEATHER_SERVICE_URL: http://weather:3002
    ports:
      - "3000:3000"

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - "3004:3004"
    env_file: ./services/api-gateway/.env
    depends_on:
      - weather
      - subscription

volumes:
  postgres_data:
  redis_data:
